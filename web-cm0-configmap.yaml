apiVersion: v1
data:
  Dockerfile: |-
    FROM python:3.12
    EXPOSE 5000
    WORKDIR /app
    RUN pip install flask
    COPY . .
    CMD ["flask", "run", "--host", "0.0.0.0"]
  app.py: "from flask import Flask, request\n\napp = Flask(__name__)\n\nstores = [\n    {\n        \"name\": \"My Store\",\n        \"items\": [\n            {\n                \"name\": \"Chair\",\n                \"price\": 100\n            },\n            {\n                \"name\": \"Table\",\n                \"price\": 400\n            }\n        ]\n    }\n]\n\n@app.get(\"/store\")\ndef get_stores():\n    return {\"stores\": stores}\n\n\n@app.post(\"/store\")\ndef create_store():\n    request_data = request.get_json()\n    new_store = {\"name\": request_data[\"name\"], \"items\": []}\n    stores.append(new_store)\n\n    return new_store, 201\n\n\n@app.post(\"/store/<string:name>/item\")\ndef create_item(name):\n    request_data = request.get_json()\n    for store in stores:\n        if store[\"name\"] == name:\n            new_item = {\"name\": request_data[\"name\"], \"price\": request_data[\"price\"]}\n            store[\"items\"].append(new_item)\n            return new_item, 201\n    \n    return {\"message\": \"Store not found\"}, 404\n\n\n@app.get(\"/store/<string:name>\")\ndef get_store(name):\n    for store in stores:\n        if store[\"name\"] == name:\n            return store, 201\n    \n    return {\"message\": \"Store not found\"}, 404\n\n\n@app.get(\"/store/<string:name>/items\")\ndef get_items_in_store(name):\n    for store in stores:\n        if store[\"name\"] == name:\n            return {\"items\": store[\"items\"]}, 201\n    \n    return {\"message\": \"Store not found\"}, 404"
  docker-compose.yml: "services:\n  web:               # name of service\n    build: .\n    ports:\n      - \"5000:5000\"  # container exposes port 5000\n    volumes:\n      - .:/app       # keep local workdir in sync with folder /app inside the container\n      "
  web-cm0-configmap.yaml: |
    apiVersion: v1
    data:
      Dockerfile: |-
        FROM python:3.12
        EXPOSE 5000
        WORKDIR /app
        RUN pip install flask
        COPY . .
        CMD ["flask", "run", "--host", "0.0.0.0"]
      app.py: "from flask import Flask, request\n\napp = Flask(__name__)\n\nstores = [\n    {\n        \"name\": \"My Store\",\n        \"items\": [\n            {\n                \"name\": \"Chair\",\n                \"price\": 100\n            },\n            {\n                \"name\": \"Table\",\n                \"price\": 400\n            }\n        ]\n    }\n]\n\n@app.get(\"/store\")\ndef get_stores():\n    return {\"stores\": stores}\n\n\n@app.post(\"/store\")\ndef create_store():\n    request_data = request.get_json()\n    new_store = {\"name\": request_data[\"name\"], \"items\": []}\n    stores.append(new_store)\n\n    return new_store, 201\n\n\n@app.post(\"/store/<string:name>/item\")\ndef create_item(name):\n    request_data = request.get_json()\n    for store in stores:\n        if store[\"name\"] == name:\n            new_item = {\"name\": request_data[\"name\"], \"price\": request_data[\"price\"]}\n            store[\"items\"].append(new_item)\n            return new_item, 201\n    \n    return {\"message\": \"Store not found\"}, 404\n\n\n@app.get(\"/store/<string:name>\")\ndef get_store(name):\n    for store in stores:\n        if store[\"name\"] == name:\n            return store, 201\n    \n    return {\"message\": \"Store not found\"}, 404\n\n\n@app.get(\"/store/<string:name>/items\")\ndef get_items_in_store(name):\n    for store in stores:\n        if store[\"name\"] == name:\n            return {\"items\": store[\"items\"]}, 201\n    \n    return {\"message\": \"Store not found\"}, 404"
      docker-compose.yml: "version: '3'\nservices:\n  web:               # name of service\n    build: .\n    ports:\n      - \"5000:5000\"  # container exposes port 5000\n    volumes:\n      - .:/app       # keep local workdir in sync with folder /app inside the container\n      "
      web-cm0-configmap.yaml: |
        apiVersion: v1
        data:
          Dockerfile: |-
            FROM python:3.12
            EXPOSE 5000
            WORKDIR /app
            RUN pip install flask
            COPY . .
            CMD ["flask", "run", "--host", "0.0.0.0"]
          app.py: "from flask import Flask, request\n\napp = Flask(__name__)\n\nstores = [\n    {\n        \"name\": \"My Store\",\n        \"items\": [\n            {\n                \"name\": \"Chair\",\n                \"price\": 100\n            },\n            {\n                \"name\": \"Table\",\n                \"price\": 400\n            }\n        ]\n    }\n]\n\n@app.get(\"/store\")\ndef get_stores():\n    return {\"stores\": stores}\n\n\n@app.post(\"/store\")\ndef create_store():\n    request_data = request.get_json()\n    new_store = {\"name\": request_data[\"name\"], \"items\": []}\n    stores.append(new_store)\n\n    return new_store, 201\n\n\n@app.post(\"/store/<string:name>/item\")\ndef create_item(name):\n    request_data = request.get_json()\n    for store in stores:\n        if store[\"name\"] == name:\n            new_item = {\"name\": request_data[\"name\"], \"price\": request_data[\"price\"]}\n            store[\"items\"].append(new_item)\n            return new_item, 201\n    \n    return {\"message\": \"Store not found\"}, 404\n\n\n@app.get(\"/store/<string:name>\")\ndef get_store(name):\n    for store in stores:\n        if store[\"name\"] == name:\n            return store, 201\n    \n    return {\"message\": \"Store not found\"}, 404\n\n\n@app.get(\"/store/<string:name>/items\")\ndef get_items_in_store(name):\n    for store in stores:\n        if store[\"name\"] == name:\n            return {\"items\": store[\"items\"]}, 201\n    \n    return {\"message\": \"Store not found\"}, 404"
          docker-compose.yml: |
            services:
              web:               # name of service
                build: .
                ports:
                  - "5000:5000"  # container exposes port 5000
                volumes:
                  - .:/app       # keep local workdir in sync with folder /app inside the container
          web-cm0-configmap.yaml: |
            apiVersion: v1
            data:
              Dockerfile: |-
                FROM python:3.12
                EXPOSE 5000
                WORKDIR /app
                RUN pip install flask
                COPY . .
                CMD ["flask", "run", "--host", "0.0.0.0"]
              app.py: "from flask import Flask, request\n\napp = Flask(__name__)\n\nstores = [\n    {\n        \"name\": \"My Store\",\n        \"items\": [\n            {\n                \"name\": \"Chair\",\n                \"price\": 100\n            },\n            {\n                \"name\": \"Table\",\n                \"price\": 400\n            }\n        ]\n    }\n]\n\n@app.get(\"/store\")\ndef get_stores():\n    return {\"stores\": stores}\n\n\n@app.post(\"/store\")\ndef create_store():\n    request_data = request.get_json()\n    new_store = {\"name\": request_data[\"name\"], \"items\": []}\n    stores.append(new_store)\n\n    return new_store, 201\n\n\n@app.post(\"/store/<string:name>/item\")\ndef create_item(name):\n    request_data = request.get_json()\n    for store in stores:\n        if store[\"name\"] == name:\n            new_item = {\"name\": request_data[\"name\"], \"price\": request_data[\"price\"]}\n            store[\"items\"].append(new_item)\n            return new_item, 201\n    \n    return {\"message\": \"Store not found\"}, 404\n\n\n@app.get(\"/store/<string:name>\")\ndef get_store(name):\n    for store in stores:\n        if store[\"name\"] == name:\n            return store, 201\n    \n    return {\"message\": \"Store not found\"}, 404\n\n\n@app.get(\"/store/<string:name>/items\")\ndef get_items_in_store(name):\n    for store in stores:\n        if store[\"name\"] == name:\n            return {\"items\": store[\"items\"]}, 201\n    \n    return {\"message\": \"Store not found\"}, 404"
              docker-compose.yml: |-
                version: '3'
                services:
                  web:               # name of service
                    build: .
                    ports:
                      - "5000:5000"  # container exposes port 5000
                    volumes:
                      - .:/app       # keep local workdir in sync with folder /app inside the container
            kind: ConfigMap
            metadata:
              labels:
                io.kompose.service: web
              name: web-cm0
          web-deployment.yaml: |
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              annotations:
                kompose.cmd: kompose convert
                kompose.version: 1.36.0 (HEAD)
              labels:
                io.kompose.service: web
              name: web
            spec:
              replicas: 1
              selector:
                matchLabels:
                  io.kompose.service: web
              strategy:
                type: Recreate
              template:
                metadata:
                  annotations:
                    kompose.cmd: kompose convert
                    kompose.version: 1.36.0 (HEAD)
                  labels:
                    io.kompose.service: web
                spec:
                  containers:
                    - image: web
                      name: web
                      ports:
                        - containerPort: 5000
                          protocol: TCP
                      volumeMounts:
                        - mountPath: /app
                          name: web-cm0
                  restartPolicy: Always
                  volumes:
                    - configMap:
                        name: web-cm0
                      name: web-cm0
          web-service.yaml: |
            apiVersion: v1
            kind: Service
            metadata:
              annotations:
                kompose.cmd: kompose convert
                kompose.version: 1.36.0 (HEAD)
              labels:
                io.kompose.service: web
              name: web
            spec:
              ports:
                - name: "5000"
                  port: 5000
                  targetPort: 5000
              selector:
                io.kompose.service: web
        kind: ConfigMap
        metadata:
          labels:
            io.kompose.service: web
          name: web-cm0
      web-deployment.yaml: |
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          annotations:
            kompose.cmd: kompose convert
            kompose.version: 1.36.0 (HEAD)
          labels:
            io.kompose.service: web
          name: web
        spec:
          replicas: 1
          selector:
            matchLabels:
              io.kompose.service: web
          strategy:
            type: Recreate
          template:
            metadata:
              annotations:
                kompose.cmd: kompose convert
                kompose.version: 1.36.0 (HEAD)
              labels:
                io.kompose.service: web
            spec:
              containers:
                - image: web
                  name: web
                  ports:
                    - containerPort: 5000
                      protocol: TCP
                  volumeMounts:
                    - mountPath: /app
                      name: web-cm0
              restartPolicy: Always
              volumes:
                - configMap:
                    name: web-cm0
                  name: web-cm0
      web-service.yaml: |
        apiVersion: v1
        kind: Service
        metadata:
          annotations:
            kompose.cmd: kompose convert
            kompose.version: 1.36.0 (HEAD)
          labels:
            io.kompose.service: web
          name: web
        spec:
          ports:
            - name: "5000"
              port: 5000
              targetPort: 5000
          selector:
            io.kompose.service: web
    kind: ConfigMap
    metadata:
      labels:
        io.kompose.service: web
      name: web-cm0
  web-deployment.yaml: |
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        kompose.cmd: kompose convert
        kompose.version: 1.36.0 (HEAD)
      labels:
        io.kompose.service: web
      name: web
    spec:
      replicas: 1
      selector:
        matchLabels:
          io.kompose.service: web
      strategy:
        type: Recreate
      template:
        metadata:
          annotations:
            kompose.cmd: kompose convert
            kompose.version: 1.36.0 (HEAD)
          labels:
            io.kompose.service: web
        spec:
          containers:
            - image: web
              name: web
              ports:
                - containerPort: 5000
                  protocol: TCP
              volumeMounts:
                - mountPath: /app
                  name: web-cm0
          restartPolicy: Always
          volumes:
            - configMap:
                name: web-cm0
              name: web-cm0
  web-service.yaml: |
    apiVersion: v1
    kind: Service
    metadata:
      annotations:
        kompose.cmd: kompose convert
        kompose.version: 1.36.0 (HEAD)
      labels:
        io.kompose.service: web
      name: web
    spec:
      ports:
        - name: "5000"
          port: 5000
          targetPort: 5000
      selector:
        io.kompose.service: web
kind: ConfigMap
metadata:
  labels:
    io.kompose.service: web
  name: web-cm0
